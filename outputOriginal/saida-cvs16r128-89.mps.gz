Welcome to the CBC MILP Solver 
Version: devel 
Build Date: Sep 25 2020 

command line - ./cbc input/cvs16r128-89.mps.gz sec 180 solve (default strategy 1)
At line 2 NAME          cvs16r128-89
At line 3 ROWS
At line 4638 COLUMNS
At line 19217 RHS
At line 19323 BOUNDS
At line 22796 ENDATA
Problem cvs16r128-89 has 4633 rows, 3472 columns and 12528 elements
Coin0008I cvs16r128-89 read with 0 errors
seconds was changed from 1e+100 to 180
Continuous objective value is -128 - 3.33 seconds
Cgl0004I processed model has 4633 rows, 3472 columns (3472 integer (3472 of which binary)) and 12528 elements
Coin3009W Conflict graph built in 0.007 seconds, density: 0.077%
Cgl0015I Clique Strengthening extended 0 cliques, 0 were dominated
Cutoff increment increased from 0.0001 to 0.9999
Cbc0038I Initial state - 3210 integers unsatisfied sum - 214
Cbc0038I Solution found of -2
Cbc0038I Before mini branch and bound, 262 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4633 rows 3472 columns, reduced to 4318 rows 3210 columns - too large
Cbc0038I Mini branch and bound did not improve solution (3.95 seconds)
Cbc0038I Round again with cutoff of -15.4999
Cbc0038I Pass   1: (5.06 seconds) suminf.    0.75014 (3) obj. -15.4999 iterations 2728
Cbc0038I Solution found of -16
Cbc0038I Before mini branch and bound, 262 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4633 rows 3472 columns, reduced to 4318 rows 3210 columns - 6 fixed gives 3776, 2877 - still too large
Cbc0038I Mini branch and bound did not improve solution (5.10 seconds)
Cbc0038I Round again with cutoff of -39.1999
Cbc0038I Pass   2: (5.54 seconds) suminf.   19.30273 (54) obj. -39.1999 iterations 1235
Cbc0038I Pass   3: (5.88 seconds) suminf.    0.34986 (7) obj. -39.1999 iterations 1195
Cbc0038I Pass   4: (5.91 seconds) suminf.    0.34986 (7) obj. -39.1999 iterations 15
Cbc0038I Solution found of -43
Cbc0038I Before mini branch and bound, 257 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4633 rows 3472 columns, reduced to 4320 rows 3213 columns - 20 fixed gives 3616, 2773 - still too large
Cbc0038I Mini branch and bound did not improve solution (5.95 seconds)
Cbc0038I Round again with cutoff of -69.1999
Cbc0038I Pass   5: (6.17 seconds) suminf.   73.98043 (702) obj. -69.1999 iterations 306
Cbc0038I Pass   6: (7.31 seconds) suminf.   51.72418 (313) obj. -69.1999 iterations 3431
Cbc0038I Pass   7: (7.42 seconds) suminf.   49.39986 (247) obj. -69.1999 iterations 242
Cbc0038I Pass   8: (7.45 seconds) suminf.   49.39986 (247) obj. -69.1999 iterations 1
Cbc0038I Pass   9: (7.53 seconds) suminf.   47.30602 (216) obj. -69.1999 iterations 205
Cbc0038I Pass  10: (8.11 seconds) suminf.   20.19958 (63) obj. -69.1999 iterations 1549
Cbc0038I Pass  11: (8.71 seconds) suminf.   17.67259 (40) obj. -69.1999 iterations 1508
Cbc0038I Pass  12: (9.05 seconds) suminf.    0.99965 (12) obj. -69.1999 iterations 800
Cbc0038I Pass  13: (9.16 seconds) suminf.    0.49982 (5) obj. -69.1999 iterations 172
Cbc0038I Solution found of -71
Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4633 rows 3472 columns, reduced to 4600 rows 3424 columns - 12 fixed gives 4147, 3157 - still too large
Cbc0038I Mini branch and bound did not improve solution (9.20 seconds)
Cbc0038I Round again with cutoff of -88.7999
Cbc0038I Pass  14: (9.29 seconds) suminf.  135.84326 (1862) obj. -88.7999 iterations 86
Cbc0038I Pass  15: (10.40 seconds) suminf.   70.67923 (713) obj. -88.7999 iterations 3003
Cbc0038I Pass  16: (10.73 seconds) suminf.   65.07005 (478) obj. -88.7999 iterations 937
Cbc0038I Pass  17: (10.91 seconds) suminf.   61.61160 (459) obj. -88.7999 iterations 416
Cbc0038I Pass  18: (11.14 seconds) suminf.   44.95739 (191) obj. -88.7999 iterations 670
Cbc0038I Pass  19: (11.25 seconds) suminf.   40.49982 (171) obj. -88.7999 iterations 240
Cbc0038I Pass  20: (11.46 seconds) suminf.   28.58060 (140) obj. -88.7999 iterations 458
Cbc0038I Pass  21: (11.73 seconds) suminf.   26.36457 (132) obj. -88.7999 iterations 980
Cbc0038I Pass  22: (12.38 seconds) suminf.   15.29988 (58) obj. -88.7999 iterations 1573
Cbc0038I Pass  23: (12.61 seconds) suminf.    7.50140 (30) obj. -88.7999 iterations 599
Cbc0038I Solution found of -89
Cbc0038I Before mini branch and bound, 48 integers at bound fixed and 0 continuous
Cbc0038I Full problem 4633 rows 3472 columns, reduced to 4600 rows 3424 columns - 12 fixed gives 4147, 3157 - still too large
Cbc0038I Mini branch and bound did not improve solution (12.65 seconds)
Cbc0038I Round again with cutoff of -105.2
Cbc0038I Pass  24: (12.71 seconds) suminf.  174.33113 (2301) obj. -105.2 iterations 43
Cbc0038I Pass  25: (13.08 seconds) suminf.  159.61219 (1947) obj. -105.2 iterations 714
Cbc0038I Pass  26: (13.84 seconds) suminf.  152.46553 (1765) obj. -105.2 iterations 1511
Cbc0038I Pass  27: (14.29 seconds) suminf.  148.67027 (1803) obj. -105.2 iterations 943
Cbc0038I Pass  28: (14.87 seconds) suminf.  149.25833 (1595) obj. -105.2 iterations 1243
Cbc0038I Pass  29: (15.68 seconds) suminf.  145.72557 (1773) obj. -105.2 iterations 1841
Cbc0038I Pass  30: (16.08 seconds) suminf.  140.67115 (1575) obj. -105.2 iterations 843
Cbc0038I Pass  31: (16.34 seconds) suminf.  138.20182 (1639) obj. -105.2 iterations 554
Cbc0038I Pass  32: (17.04 seconds) suminf.  130.02525 (1250) obj. -105.2 iterations 1448
Cbc0038I Pass  33: (17.37 seconds) suminf.  123.02335 (1502) obj. -105.2 iterations 767
Cbc0038I Pass  34: (17.83 seconds) suminf.  119.10998 (1360) obj. -105.2 iterations 899
Cbc0038I Pass  35: (18.13 seconds) suminf.  114.65659 (1359) obj. -105.2 iterations 571
Cbc0038I Pass  36: (18.36 seconds) suminf.  110.96126 (1230) obj. -105.2 iterations 427
Cbc0038I Pass  37: (18.52 seconds) suminf.  110.66647 (1216) obj. -105.2 iterations 280
Cbc0038I Pass  38: (19.02 seconds) suminf.  109.63797 (1325) obj. -105.2 iterations 913
Cbc0038I Pass  39: (19.27 seconds) suminf.  109.63797 (1325) obj. -105.2 iterations 334
Cbc0038I Pass  40: (19.72 seconds) suminf.  109.63797 (1325) obj. -105.2 iterations 671
Cbc0038I Pass  41: (20.47 seconds) suminf.  125.04792 (1550) obj. -105.2 iterations 1286
Cbc0038I Pass  42: (21.24 seconds) suminf.  109.47072 (1347) obj. -105.2 iterations 1254
Cbc0038I Pass  43: (21.30 seconds) suminf.  109.46112 (1364) obj. -105.2 iterations 58
Cbc0038I Pass  44: (21.63 seconds) suminf.  108.41752 (1198) obj. -105.2 iterations 619
Cbc0038I Pass  45: (21.80 seconds) suminf.  108.36464 (1315) obj. -105.2 iterations 225
Cbc0038I Pass  46: (21.86 seconds) suminf.  108.36132 (1310) obj. -105.2 iterations 59
Cbc0038I Pass  47: (22.44 seconds) suminf.  115.30055 (1114) obj. -105.2 iterations 1037
Cbc0038I Pass  48: (23.06 seconds) suminf.  108.36132 (1310) obj. -105.2 iterations 1023
Cbc0038I Pass  49: (23.19 seconds) suminf.  108.36132 (1310) obj. -105.2 iterations 150
Cbc0038I Pass  50: (23.77 seconds) suminf.  117.55313 (1211) obj. -105.2 iterations 1013
Cbc0038I No solution found this major pass
Cbc0038I After 23.77 seconds - Feasibility pump exiting with objective of -89 - took 20.15 seconds
Cbc0012I Integer solution of -89 found by feasibility pump after 0 iterations and 0 nodes (23.77 seconds)
Cbc0013I At root node, 0 cuts changed objective from -128 to -128 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.750 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.868 seconds - new frequency is -100
Cbc0014I Cut generator 4 (OddWheel) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 5.628 seconds - new frequency is -100
Cbc0014I Cut generator 5 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 6 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, -89 best solution, best possible -128 (49.52 seconds)
Cbc0010I After 1 nodes, 2 on tree, -89 best solution, best possible -128 (57.86 seconds)
Cbc0010I After 2 nodes, 3 on tree, -89 best solution, best possible -128 (73.87 seconds)
Cbc0010I After 3 nodes, 4 on tree, -89 best solution, best possible -128 (86.41 seconds)
Cbc0010I After 4 nodes, 5 on tree, -89 best solution, best possible -128 (100.56 seconds)
Cbc0010I After 5 nodes, 6 on tree, -89 best solution, best possible -128 (115.48 seconds)
Cbc0010I After 6 nodes, 7 on tree, -89 best solution, best possible -128 (128.65 seconds)
Cbc0010I After 7 nodes, 8 on tree, -89 best solution, best possible -128 (134.33 seconds)
Cbc0010I After 8 nodes, 8 on tree, -89 best solution, best possible -128 (135.10 seconds)
Cbc0010I After 9 nodes, 9 on tree, -89 best solution, best possible -128 (138.05 seconds)
Cbc0010I After 10 nodes, 9 on tree, -89 best solution, best possible -128 (138.84 seconds)
Cbc0010I After 11 nodes, 10 on tree, -89 best solution, best possible -128 (140.23 seconds)
Cbc0010I After 13 nodes, 11 on tree, -89 best solution, best possible -128 (141.37 seconds)
Cbc0010I After 14 nodes, 11 on tree, -89 best solution, best possible -128 (142.31 seconds)
Cbc0010I After 17 nodes, 14 on tree, -89 best solution, best possible -128 (143.20 seconds)
Cbc0010I After 18 nodes, 14 on tree, -89 best solution, best possible -128 (143.95 seconds)
Cbc0010I After 19 nodes, 14 on tree, -89 best solution, best possible -128 (146.07 seconds)
Cbc0010I After 20 nodes, 14 on tree, -89 best solution, best possible -128 (147.03 seconds)
Cbc0010I After 22 nodes, 15 on tree, -89 best solution, best possible -128 (148.30 seconds)
Cbc0010I After 25 nodes, 17 on tree, -89 best solution, best possible -128 (150.48 seconds)
Cbc0010I After 26 nodes, 17 on tree, -89 best solution, best possible -128 (151.29 seconds)
Cbc0010I After 29 nodes, 19 on tree, -89 best solution, best possible -128 (152.77 seconds)
Cbc0010I After 30 nodes, 19 on tree, -89 best solution, best possible -128 (155.06 seconds)
Cbc0010I After 32 nodes, 20 on tree, -89 best solution, best possible -128 (156.22 seconds)
Cbc0010I After 34 nodes, 21 on tree, -89 best solution, best possible -128 (157.64 seconds)
Cbc0010I After 36 nodes, 22 on tree, -89 best solution, best possible -128 (160.41 seconds)
Cbc0010I After 38 nodes, 23 on tree, -89 best solution, best possible -128 (161.65 seconds)
Cbc0010I After 40 nodes, 24 on tree, -89 best solution, best possible -128 (162.59 seconds)
Cbc0038I Full problem 4633 rows 3472 columns, reduced to 3423 rows 2578 columns - 3 fixed gives 3421, 2575 - still too large
Cbc0038I Full problem 4633 rows 3472 columns, reduced to 3421 rows 2575 columns - too large
Cbc0010I After 41 nodes, 25 on tree, -89 best solution, best possible -128 (165.49 seconds)
Cbc0010I After 43 nodes, 26 on tree, -89 best solution, best possible -128 (166.43 seconds)
Cbc0010I After 44 nodes, 26 on tree, -89 best solution, best possible -128 (169.03 seconds)
Cbc0010I After 46 nodes, 27 on tree, -89 best solution, best possible -128 (169.98 seconds)
Cbc0010I After 48 nodes, 28 on tree, -89 best solution, best possible -128 (171.20 seconds)
Cbc0010I After 50 nodes, 29 on tree, -89 best solution, best possible -128 (172.52 seconds)
Cbc0010I After 52 nodes, 30 on tree, -89 best solution, best possible -128 (175.30 seconds)
Cbc0010I After 54 nodes, 31 on tree, -89 best solution, best possible -128 (176.25 seconds)
Cbc0010I After 57 nodes, 33 on tree, -89 best solution, best possible -128 (177.33 seconds)
Cbc0010I After 59 nodes, 34 on tree, -89 best solution, best possible -128 (178.31 seconds)
Cbc0010I After 60 nodes, 34 on tree, -89 best solution, best possible -128 (179.13 seconds)
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective -89 (best possible -128), took 24343 iterations and 62 nodes (180.07 seconds)
Cbc0032I Strong branching done 1374 times (34299 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 32, 0 variables fixed on reduced cost
Cuts at root node changed objective from -128 to -128
Probing was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)
Gomory was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.750 seconds)
Knapsack was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Clique was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.868 seconds)
OddWheel was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (5.628 seconds)
MixedIntegerRounding2 was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
FlowCover was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
TwoMirCuts was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.775 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (3.037 seconds)

Result - Stopped on time limit

Objective value:                -89.00000000
Lower bound:                    -128.000
Gap:                            0.30
Enumerated nodes:               62
Total iterations:               24343
Time (CPU seconds):             180.89
Time (Wallclock seconds):       181.35

Total time (CPU seconds):       180.91   (Wallclock seconds):       181.37

